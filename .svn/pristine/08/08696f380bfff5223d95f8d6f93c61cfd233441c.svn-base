package com.web.common.service;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.servlet.View;

import com.web.common.command.CommandMap;


/**
 * 
 * @파일명		: CommonService.java 
 * @프로젝트	: ITMS
 * @날짜		: 2018. 3. 29. 
 * @작성자		: Cho HeumJun
 * @설명
 * <pre>
 * 		공통 서비스 인터페이스 각 로직에서 상속됨
 * </pre>
 */
public interface CommonService 
{

	/**
	 * 
	 * @메소드명	: errorService
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 Exception 처리
	 * </pre>
	 * @param ex
	 * @param request
	 */
	void errorService(Exception ex, HttpServletRequest request);

	/**
	 * 
	 * @메소드명	: getGridList
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 : 그리드의 데이타리스트 취득 로직
	 * </pre>
	 * @param commandMap
	 * @return
	 */
	Map<String, Object> getGridList(CommandMap commandMap);

	/**
	 * 
	 * @메소드명	: saveGridList
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 : 그리드의 변경된 데이타 처리 로직
	 * </pre>
	 * @param commandMap
	 * @return
	 * @throws Exception
	 */
	Map<String, String> saveGridList(CommandMap commandMap) throws Exception;

	/**
	 * 
	 * @메소드명	: getUserRole
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 : 유저의 권한을 받아오는 처리
	 * </pre>
	 * @param commandMap
	 * @return
	 */
	Map<String, Object> getUserRole(CommandMap commandMap);

	/**
	 * 
	 * @메소드명	: gridDataInsert
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		각 로직별로 재정의 혹은 super로 이용(그리드 데이터 입력)
	 * </pre>
	 * @param rowData
	 * @return
	 */
	String gridDataInsert(Map<String, Object> rowData);

	/**
	 * 
	 * @메소드명	: gridDataUpdate
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		각 로직별로 재정의 혹은 super로 이용(그리드 데이터 수정)
	 * </pre>
	 * @param rowData
	 * @return
	 */
	String gridDataUpdate(Map<String, Object> rowData);

	/**
	 * 
	 * @메소드명	: gridDataDelete
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		각 로직별로 재정의 혹은 super로 이용(그리드 데이터 삭제)
	 * </pre>
	 * @param rowData
	 * @return
	 */
	String gridDataDelete(Map<String, Object> rowData);

	/**
	 * 
	 * @메소드명	: getDuplicationCnt
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		각 로직별로 재정의 혹은 super로 이용(그리드 데이터 중복체크)
	 * </pre>
	 * @param rowData
	 * @return
	 */
	String getDuplicationCnt(Map<String, Object> rowData);

	/**
	 * 
	 * @메소드명	: getGridData
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		각 로직별로 재정의 혹은 super로 이용(그리드 데이터 취득)
	 * </pre>
	 * @param map
	 * @return
	 */
	List<Map<String, Object>> getGridData(Map<String, Object> map);

	/**
	 * 
	 * @메소드명	: getGridListSize
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		각 로직별로 재정의 혹은 super로 이용(그리드 데이터 사이즈 취득)
	 * </pre>
	 * @param map
	 * @return
	 */
	Object getGridListSize(Map<String, Object> map);

	/**
	 * 
	 * @메소드명	: getGridListNoPaging
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		페이징이 없는 그리드 리스트 로직
	 * </pre>
	 * @param commandMap
	 * @return
	 */
	Map<String, Object> getGridListNoPaging(CommandMap commandMap);

	/**
	 * 
	 * @메소드명	: getDbDataOne
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		그리드가 아닌 단일 DB정보를 받아옴
	 * 		1. 맵핑 파일은 액션서블릿명과 연동된다.
	 * </pre>
	 * @param commandMap
	 * @return
	 */
	Map<String, Object> getDbDataOne(CommandMap commandMap);

	/**
	 * 
	 * @메소드명	: getDbDataList
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		그리드가 아닌 리스트 DB정보를 받아옴
	 * 		1. 맵핑 파일은 액션서블릿명과 연동된다.
	 * </pre>
	 * @param commandMap
	 * @return
	 */
	List<Map<String, Object>> getDbDataList(CommandMap commandMap);

	/**
	 * 
	 * @메소드명	: getSelectBoxDataList
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 AJAX 셀렉트 박스 호출
	 * </pre>
	 * @param commandMap
	 * @return
	 * @throws Exception
	 */
	String getSelectBoxDataList(CommandMap commandMap) throws Exception;

	/**
	 * 
	 * @메소드명	: updateDbData
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 DBDATA UPDATE
	 * </pre>
	 * @param commandMap
	 * @return
	 */
	int updateDbData(CommandMap commandMap);

	/**
	 * 
	 * @메소드명	: excelExport
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 엑셀 출력
	 * </pre>
	 * @param commandMap
	 * @param modelMap
	 * @return
	 */
	View excelExport(CommandMap commandMap, Map<String, Object> modelMap);

	/**
	 * 
	 * @메소드명	: saveManualGridList
	 * @날짜		: 2018. 3. 5.
	 * @작성자		: Cho HeumJun
	 * @설명
	 * <pre>
	 *		공통 : 그리드의 변경된 데이타 처리 로직
	 * </pre>
	 * @param commandMap
	 * @return
	 * @throws Exception
	 */
	Map<String, String> saveManualGridList(CommandMap commandMap) throws Exception;

}
